#BlueJ class context
comment0.target=UI
comment0.text=\r\n\ UI\ is\ a\ utility\ or\ helper\ class\ for\ ITP\ 265\ that\ helps\ provide\ a\ friendly\ way\ to\ \r\n\ read\ input\ from\ a\ user\ and\ verify\ that\ the\ input\ is\ correct.\r\n\ \r\n\ @author\ Kendra\ Walther\r\n\ ITP\ 265\r\n\ Email\:\ kwalther@usc.edu\ \r\n\r\n
comment1.params=
comment1.target=UI()
comment1.text=\r\n\ Constructor\ sets\ up\ a\ Scanner\ to\ be\ used\ by\ the\ class\ in\ order\ to\ read\ input\ from\ the\ standard\ console\ window\ (System.in)\r\n
comment10.params=text\ maxLineLength
comment10.target=void\ printLongTextWithBreaks(java.lang.String,\ int)
comment10.text=\r\n\ Code\ from\:\ https\://stackoverflow.com/questions/7528045/large-string-split-into-lines-with-maximum-length-in-java\r\n\ \r\n\ This\ code\ will\ take\ a\ line\ of\ text\ and\ print\ it\ nicely.\ Since\ it\ does\ not\ need\ Scanner,\ this\ can\ be\ a\ function\r\n\ and\ called\ directly\ using\ a\ call\ like\:\ Helper.printLongTextWithBreaks(bigTextString,\ 90)\r\n\ \r\n\ @param\ text\:\ the\ long\ string\ that\ needs\ to\ be\ split\ to\ output\ nicely\r\n\ @param\ maxLineLength\ \r\n\r\n
comment11.params=fileName
comment11.target=java.lang.String[]\ readFile(java.lang.String)
comment11.text=\r\n\ This\ function\ will\ read\ from\ the\ given\ file\ (provided\ it\ is\ found)\ and\ return\ an\ \r\n\ array\ of\ Strings,\ with\ each\ spot\ in\ the\ array\ holding\ one\ line\ from\ the\ file\r\n\ @param\ fileName\r\n\ @return\ array\ of\ Strings,\ each\ String\ is\ one\ line\ from\ the\ file.\r\n
comment12.params=output
comment12.target=void\ printPretty(java.lang.String)
comment12.text=\r\n\ Short-cut\ helper\ function\ that\ prints\ a\ String\ with\ a\ series\ of\ stars\ around\ it.\r\n\ Note\:\ it\ doesn't\ use\ Scanner,\ so\ can\ be\ called\ on\ the\ class\ UI\ instead\ of\ on\ an\ object.\r\n\ @param\ output\:\ The\ String\ to\ be\ printed\r\n
comment13.params=output
comment13.target=void\ print(java.lang.String)
comment13.text=\r\n\ Short-cut\ helper\ function\ that\ prints\ a\ String.\r\n\ Basically,\ it\ is\ a\ shortcut,\ so\ now\ you\ can\ type\ UI.print("string");\r\n\ instead\ of\ the\ longer\:\ System.out.println("string");\r\n\ Note\:\ it\ doesn't\ use\ Scanner\ (UI's\ instance\ variable),\ so\ can\ be\ called\ on\ \r\n\ the\ class\ instead\ of\ on\ an\ object.\r\n\ @param\ output\:\ The\ String\ to\ be\ printed\r\n
comment2.params=prompt
comment2.target=java.lang.String\ inputLine(java.lang.String)
comment2.text=\r\n\ Prompt\ the\ user\ and\ read\ one\ line\ of\ text\ as\ a\ String\r\n\ @param\ prompt\:\ the\ question\ to\ ask\ the\ user\r\n\ @return\:\ a\ line\ of\ user\ input\ (including\ spaces,\ until\ they\ hit\ enter)\r\n
comment3.params=prompt
comment3.target=java.lang.String\ inputWord(java.lang.String)
comment3.text=\r\n\ Prompt\ the\ user\ and\ read\ one\ word\ of\ text\ as\ a\ String\r\n\ @param\ prompt\:\ the\ question\ to\ ask\ the\ user\r\n\ @return\:\ a\ one\ word\ String\ -\ if\ the\ user\ enters\ multiple\ words,\ all\ other\ input\ until\ the\ return\ will\ be\ discarded.\r\n
comment4.params=prompt\ option1\ option2
comment4.target=java.lang.String\ inputWord(java.lang.String,\ java.lang.String,\ java.lang.String)
comment4.text=\r\n\ Prompt\ the\ user\ and\ read\ one\ word\ -\ which\ must\ match\ either\ option1\ or\ option2\ parameters.\r\n\ @param\ prompt\:\ the\ question\ to\ ask\ the\ user\ (should\ include\ the\ two\ valid\ options\ the\ user\ should\ choose\ from)\r\n\ @param\ option1\ \:\ One\ string\ option\ for\ the\ user\ to\ choose.\r\n\ @param\ option2\:\ the\ other\ string\ option\ for\ the\ user\ to\ choose.\r\n\ @return\:\ A\ string\ matching\ either\ option1\ or\ option2\r\n
comment5.params=prompt
comment5.target=int\ inputInt(java.lang.String)
comment5.text=\r\n\ Prompt\ the\ user\ and\ read\ an\ int,\ clearing\ whitespace\ or\ the\ enter\ after\ the\ number\r\n\ @param\ prompt\:\ the\ question\ to\ ask\ the\ user\ \r\n\ @return\:\ an\ int\ \r\n
comment6.params=prompt\ minValue\ maxValue
comment6.target=int\ inputInt(java.lang.String,\ int,\ int)
comment6.text=\r\n\ Prompt\ the\ user\ and\ read\ an\ int\ between\ (inclusive)\ of\ minValue\ and\ maxValue,\ clearing\ whitespace\ or\ the\ enter\ after\ the\ number\r\n\ @param\ prompt\:\ the\ question\ to\ ask\ the\ user\ \r\n\ @return\:\ an\ int\ between\ minValue\ and\ maxValue\r\n
comment7.params=prompt
comment7.target=double\ inputDouble(java.lang.String)
comment7.text=\r\n\ Prompt\ the\ user\ and\ read\ a\ floating\ point\ number,\ clearing\ whitespace\ or\ the\ enter\ after\ the\ number\r\n\ @param\ prompt\:\ the\ question\ to\ ask\ the\ user\ \r\n\ @return\:\ a\ double\ value\ \r\n
comment8.params=prompt
comment8.target=boolean\ inputBoolean(java.lang.String)
comment8.text=\r\n\ Prompt\ the\ user\ and\ read\ a\ boolean\ value,\ clearing\ whitespace\ or\ the\ enter\ after\ the\ number\r\n\ @param\ prompt\:\ the\ question\ to\ ask\ the\ user\ \r\n\ @return\:\ a\ boolean\ value\ \r\n
comment9.params=prompt
comment9.target=boolean\ inputYesNo(java.lang.String)
comment9.text=\r\n\ Prompt\ the\ user\ enter\ yes\ or\ no\ (will\ match\ y/yes\ and\ n/no\ any\ case)\ and\ return\ true\ for\ yes\ and\ false\ for\ no.\r\n\ @param\ prompt\:\ the\ question\ to\ ask\ the\ user\ \r\n\ @return\:\ a\ boolean\ value\ \r\n
numComments=14
